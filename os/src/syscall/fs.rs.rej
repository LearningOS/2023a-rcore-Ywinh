diff a/os/src/syscall/fs.rs b/os/src/syscall/fs.rs	(rejected hunks)
@@ -1,6 +1,7 @@
 //! File and filesystem-related syscalls
-use crate::fs::{open_file, OpenFlags, Stat};
-use crate::mm::{translated_byte_buffer, translated_str, UserBuffer};
+
+use crate::fs::{open_file, OpenFlags, Stat, ROOT_INODE};
+use crate::mm::{translate_va2pa, translated_byte_buffer, translated_str, UserBuffer, VirtAddr};
 use crate::task::{current_task, current_user_token};
 
 pub fn sys_write(fd: usize, buf: *const u8, len: usize) -> isize {
@@ -76,28 +77,64 @@ pub fn sys_close(fd: usize) -> isize {
 }
 
 /// YOUR JOB: Implement fstat.
-pub fn sys_fstat(_fd: usize, _st: *mut Stat) -> isize {
+pub fn sys_fstat(fd: usize, st: *mut Stat) -> isize {
     trace!(
         "kernel:pid[{}] sys_fstat NOT IMPLEMENTED",
         current_task().unwrap().pid.0
     );
-    -1
+    let token = current_user_token();
+    let pa = translate_va2pa(token, VirtAddr::from(st as usize));
+    let ptr: &mut Stat = pa.get_mut();
+
+    let task = current_task().unwrap();
+    let inner = task.inner_exclusive_access();
+    if fd >= inner.fd_table.len() {
+        return -1;
+    }
+    if let Some(file) = &inner.fd_table[fd] {
+        let file = file.clone();
+        drop(inner);
+        (*ptr).dev = 0;
+        (*ptr).ino = file.get_inode_id();
+        (*ptr).nlink = file.get_nlink();
+        (*ptr).mode = file.get_type();
+    }
+
+    0
 }
 
 /// YOUR JOB: Implement linkat.
-pub fn sys_linkat(_old_name: *const u8, _new_name: *const u8) -> isize {
+pub fn sys_linkat(old_name: *const u8, new_name: *const u8) -> isize {
     trace!(
         "kernel:pid[{}] sys_linkat NOT IMPLEMENTED",
         current_task().unwrap().pid.0
     );
-    -1
+    //首先通过old_name找到对应的inode，通过inode新建目录项写到里面
+    let token = current_user_token();
+    let old_name_str = translated_str(token, old_name);
+    let new_name_str = translated_str(token, new_name);
+    //let inode_num = ROOT_INODE.find(&old_name_str).unwrap();
+    if old_name_str == new_name_str {
+        return -1;
+    }
+    if old_name_str.len() > 27 || new_name_str.len() > 27 {
+        return -1;
+    }
+    ROOT_INODE.link(&old_name_str, &new_name_str);
+    0
 }
 
 /// YOUR JOB: Implement unlinkat.
-pub fn sys_unlinkat(_name: *const u8) -> isize {
+pub fn sys_unlinkat(name: *const u8) -> isize {
     trace!(
         "kernel:pid[{}] sys_unlinkat NOT IMPLEMENTED",
         current_task().unwrap().pid.0
     );
-    -1
+    let token = current_user_token();
+    let name_str = translated_str(token, name);
+    if ROOT_INODE.find(&name_str).is_none() {
+        return -1;
+    }
+    ROOT_INODE.unlink(&name_str);
+    0
 }
